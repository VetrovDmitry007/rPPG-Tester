#!/usr/bin/env python3
"""
PulsePause Console Version

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏–∑–º–µ—Ä—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É —Å–µ—Ä–¥–µ—á–Ω—ã—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π (HR)
—Å –ø–æ–º–æ—â—å—é –≤–µ–±-–∫–∞–º–µ—Ä—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ rPPG (Remote Photoplethysmography).
–í–º–µ—Å—Ç–æ GUI –≤—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å.
"""
import os
import json
import time
import random
import sys
import warnings

import numpy as np
import yarppg
import cv2

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ (JSON)
SETTINGS_FILE = "settings.json"

# –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –ß–°–°
MINDFULNESS_EXERCISES = [
    {
        "name": "Deep Breathing",
        "description": (
            "Take a deep breath in for 4 seconds, hold it for 4 seconds, "
            "then exhale for 6 seconds. Repeat 5 cycles."
        ),
    },
    {
        "name": "Body Scan",
        "description": (
            "Close your eyes and slowly bring attention to different parts "
            "of your body, from your toes to your head."
        ),
    },
    {
        "name": "5-4-3-2-1 Grounding",
        "description": (
            "Identify 5 things you can see, 4 things you can feel, 3 things "
            "you can hear, 2 things you can smell, and 1 thing you can taste."
        ),
    },
    {
        "name": "Gratitude Reflection",
        "description": (
            "Spend 2 minutes reflecting on 3 things you‚Äôre grateful for and why."
        ),
    },
    {
        "name": "Mindful Observation",
        "description": (
            "Choose a nearby object and focus on it for 1 minute: "
            "note its color, texture, shape and small details."
        ),
    },
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rPPG-–º–æ–¥—É–ª—è
rppg = yarppg.Rppg()


def load_settings():
    """
    –ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ JSON (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
      - disable_app: bool (–æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
      - check_in_interval: int (–∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö)
      - is_athlete: bool (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤)
    –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
    """
    if os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE, "r") as f:
            cfg = json.load(f)
    else:
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        cfg = {"disable_app": False, "check_in_interval": 60, "is_athlete": False}
        with open(SETTINGS_FILE, "w") as f:
            json.dump(cfg, f, indent=2)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
    disabled = cfg.get("disable_app", False)
    interval = cfg.get("check_in_interval", 60)
    athlete = cfg.get("is_athlete", False)
    return disabled, interval, athlete


def is_heart_rate_anomalous(hr: float, age_group: str = "adult"):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞ –ø—É–ª—å—Å–∞ (hr)
    –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã:
      - adult   ‚Üí 100 BPM
      - athlete ‚Üí 80 BPM

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (bool, str):
      - True/False ‚Äì —Ñ–∞–∫—Ç –∞–Ω–æ–º–∞–ª–∏–∏
      - –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–º HR –∏ –ø–æ—Ä–æ–≥–æ–º
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø
    thresholds = {"adult": 100, "athlete": 80}
    th = thresholds.get(age_group, thresholds["adult"])
    # –§–ª–∞–≥ –∞–Ω–æ–º–∞–ª–∏–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
    return hr > th, f"HR={hr:.1f} BPM (threshold {th} BPM)"


def check_in(is_athlete: bool = False):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ HR –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥.
    - –ü–æ–¥–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è numpy/yarppg
    - –°—á–∏—Ç—ã–≤–∞–µ—Ç –∫–∞–¥—Ä—ã —Å –∫–∞–º–µ—Ä—ã
    - –° –ø–æ–º–æ—â—å—é –∞–ª–≥–æ—Ä–∏—Ç–º–∞ rPPG –≤—ã—á–∏—Å–ª—è–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é —á–∞—Å—Ç–æ—Ç—É
    - –°–æ–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
    - –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤—ã–≤–æ–¥–∏—Ç —Å—Ä–µ–¥–Ω–∏–π HR –∏
      –ª–∏–±–æ —Å–æ–≤–µ—Ç –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é, –ª–∏–±–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ—Ä–º–µ.
    """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∫–∞–º–µ—Ä—É (ID 0)
    cam = cv2.VideoCapture(0)
    if not cam.isOpened():
        print("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É")
        return

    tracker = yarppg.FpsTracker()  # –¢—Ä–µ–∫–µ—Ä FPS –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ HR
    start_time = time.time()
    hrs = []  # —Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç

    print("[*] –ù–∞—á–∞–ª–æ –∑–∞–º–µ—Ä–∞ HR (20 —Å–µ–∫)...")

    # –ü–æ–¥–∞–≤–ª—è–µ–º —à—É–º–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
    warnings.filterwarnings("ignore", message="Mean of empty slice.")
    warnings.filterwarnings("ignore", message="invalid value encountered in scalar divide")

    # –ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 20 —Å–µ–∫—É–Ω–¥
    while time.time() - start_time < 20:
        ret, frame_bgr = cam.read()
        if not ret:
            break
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º BGR ‚Üí RGB –¥–ª—è rPPG
        frame_rgb = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2RGB)
        res = rppg.process_frame(frame_rgb)
        tracker.tick()

        # –ü–µ—Ä–µ—Å—á—ë—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ HR –≤ BPM
        if res.hr > 0:
            hr_bpm = 60 * tracker.fps / res.hr
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–µ—á–Ω—ã–µ —á–∏—Å–ª–∞ (float, –Ω–µ inf/NaN)
            if np.isfinite(hr_bpm):
                hrs.append(hr_bpm)

    cam.release()

    # –ï—Å–ª–∏ –∑–∞ 20 —Å–µ–∫ –Ω–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if not hrs:
        print("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—è HR")
        return

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —á–∞—Å—Ç–æ—Ç—É
    avg_hr = sum(hrs) / len(hrs)
    age_group = "athlete" if is_athlete else "adult"
    anomalous, report = is_heart_rate_anomalous(avg_hr, age_group)
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    if anomalous:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        exercise = random.choice(MINDFULNESS_EXERCISES)
        print(f"[{timestamp}] üö® High HR detected! {report}")
        print(
            f"    ‚Üí Suggested: {exercise['name']} ‚Äî {exercise['description']}"
        )
    else:
        print(f"[{timestamp}] ‚úÖ HR normal. {report}")


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
     - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     - –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
     - –ò–Ω–∞—á–µ –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ —Ä–∞–∑ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
       –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é check_in –∏ –∂–¥—ë—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    """
    disabled, interval_min, is_athlete = load_settings()
    if disabled:
        print("[*] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –í—ã—Ö–æ–¥.")
        sys.exit(0)

    print(f"[*] –ó–∞–ø—É—Å–∫ check-in –∫–∞–∂–¥—ã–µ {interval_min} –º–∏–Ω. (athlete={is_athlete})")
    try:
        while True:
            check_in(is_athlete=is_athlete)
            time.sleep(interval_min * 60)
    except KeyboardInterrupt:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
        print("\n[EXIT] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C.")


if __name__ == "__main__":
    main()
