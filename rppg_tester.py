#!/usr/bin/env python3
"""
rppg_tester.py
==============

–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π ¬´–ø–æ–ª–µ–≤–æ–π¬ª —Å–∫—Ä–∏–ø—Ç-–ø—Ä–æ–≤–µ—Ä–∫–∞ –ß–°–° –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏,
–ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ –µ–¥–∏–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ IRPPGModel –∏–∑ –ø–∞–∫–µ—Ç–∞
`rppg_benchmark`.

‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–µ—Ä YarppgAdapter, –Ω–æ –º–æ–∂–Ω–æ
  –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å IRPPGModel:
      python rppg_tester.py path.to.MyAdapter

‚Ä¢ –§–∞–π–ª settings.json —Ö—Ä–∞–Ω–∏—Ç:
    - disable_app        : –≤–∫–ª—é—á–∏—Ç—å / –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    - check_in_interval  : –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏ (–º–∏–Ω)
    - is_athlete         : –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ HR

–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π rppg_benchmark –∏ OpenCV.
"""

from __future__ import annotations

import importlib
import json
import random
import sys
import time
import warnings
from pathlib import Path
from types import ModuleType
from typing import List, Tuple, Type

import cv2
import numpy as np

from rppg_benchmark.interfaces import IRPPGModel

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SETTINGS_FILE = "settings.json"
MEASURE_SECONDS = 100

DEFAULT_MODEL_PATH = "rppg_benchmark.adapters.yarppg_adapter:YarppgAdapter"

MINDFULNESS_EXERCISES = [
    ("Deep Breathing",
     "Inhale 4 s ‚Üí hold 4 s ‚Üí exhale 6 s. Repeat 5 cycles."),
    ("Body Scan",
     "Close your eyes and slowly bring attention from toes to head."),
    ("5-4-3-2-1 Grounding",
     "5 things you see, 4 feel, 3 hear, 2 smell, 1 taste."),
    ("Gratitude Reflection",
     "Spend 2 min thinking of three things you are grateful for."),
    ("Mindful Observation",
     "Focus 1 min on a nearby object ‚Äì colour, texture, shape."),
]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã / —Ñ—É–Ω–∫—Ü–∏–∏
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class FpsTracker:
    """–°–∫–æ–ª—å–∑—è—â–∏–π —Å—á—ë—Ç—á–∏–∫ FPS (~1 —Å. –æ–∫–Ω–æ)."""

    def __init__(self) -> None:
        self._t0 = time.time()
        self._frames = 0
        self.fps: float = 0.0

    def tick(self) -> None:
        self._frames += 1
        dt = time.time() - self._t0
        if dt >= 1.0:
            self.fps = self._frames / dt
            self._frames = 0
            self._t0 = time.time()


def load_settings() -> Tuple[bool, int, bool]:
    """–ß–∏—Ç–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç JSON-—Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    defaults = {
        "disable_app": False,
        "check_in_interval": 60,   # –º–∏–Ω—É—Ç
        "is_athlete": False,
    }
    path = Path(SETTINGS_FILE)
    if path.exists():
        cfg = json.loads(path.read_text("utf-8"))
    else:
        cfg = defaults.copy()
        path.write_text(json.dumps(cfg, indent=2, ensure_ascii=False))

    return (
        bool(cfg.get("disable_app", False)),
        int(cfg.get("check_in_interval", 60)),
        bool(cfg.get("is_athlete", False)),
    )


def is_hr_anomalous(hr: float, athlete: bool = False) -> Tuple[bool, str]:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç HR —Å –ø–æ—Ä–æ–≥–æ–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç."""
    th = 80.0 if athlete else 100.0
    return hr > th, f"HR={hr:.1f} BPM (threshold {th} BPM)"


def dynamic_import(path: str) -> Type[IRPPGModel]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–ª–∞—Å—Å –ø–æ —Å—Ç—Ä–æ–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ ``module.sub:ClassName``.
    –ü–æ–¥–Ω–∏–º–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –∫–ª–∞—Å—Å
    –Ω–µ –Ω–∞—Å–ª–µ–¥—É–µ—Ç IRPPGModel.
    """
    if ":" not in path:
        raise ValueError("model path must be 'module.sub:ClassName'")
    mod_name, cls_name = path.split(":", 1)
    module: ModuleType = importlib.import_module(mod_name)
    cls = getattr(module, cls_name)
    if not issubclass(cls, IRPPGModel):
        raise TypeError(f"{cls} does not implement IRPPGModel")
    return cls


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def check_in(model: IRPPGModel, *, athlete: bool = False) -> None:
    """–û–¥–Ω–∞ 20-—Å–µ–∫—É–Ω–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è HR."""
    cam = cv2.VideoCapture(0)
    if not cam.isOpened():
        print("[ERROR] Cannot open camera")
        return

    model.reset()
    tracker = FpsTracker()
    hrs: List[float] = []

    print(f"[*] Measuring HR for {MEASURE_SECONDS} s ‚Ä¶")
    warnings.filterwarnings("ignore", message="Mean of empty slice")

    t_start = time.time()
    while time.time() - t_start < MEASURE_SECONDS:
        ok, frame_bgr = cam.read()
        if not ok:
            break

        frame_rgb = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2RGB)
        model.process_frame(frame_rgb)
        tracker.tick()

        if tracker.fps > 0:
            hr_bpm = model.get_hr(tracker.fps)
            # print(f"HR={hr_bpm:.1f} BPM ({tracker.fps:.1f} FPS)")
            if np.isfinite(hr_bpm) and hr_bpm > 0:
                hrs.append(hr_bpm)

    cam.release()

    if not hrs:
        print("[WARN] No valid HR values collected")
        return

    avg_hr = float(np.mean(hrs))
    bad, report = is_hr_anomalous(avg_hr, athlete=athlete)
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")

    if bad:
        exercise = random.choice(MINDFULNESS_EXERCISES)
        print(f"[{timestamp}] üö® High HR! {report}")
        print(f"    ‚Üí Try: {exercise[0]} ‚Äî {exercise[1]}")
    else:
        print(f"[{timestamp}] ‚úÖ HR normal. {report}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main(model_path: str = DEFAULT_MODEL_PATH) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ HR."""
    ModelCls = dynamic_import(model_path)

    disabled, interval_min, athlete = load_settings()
    if disabled:
        print("[*] App disabled in settings.json. Exit.")
        sys.exit(0)

    model = ModelCls()
    print(f"[*] Check-in every {interval_min} min  (athlete={athlete})")

    try:
        while True:
            check_in(model, athlete=athlete)
            time.sleep(interval_min * 60)
    except KeyboardInterrupt:
        print("\n[EXIT] Stopped by user (Ctrl+C)")


if __name__ == "__main__":
    path = sys.argv[1] if len(sys.argv) > 1 else DEFAULT_MODEL_PATH
    main(path)
